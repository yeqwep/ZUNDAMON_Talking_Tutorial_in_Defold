local M = {}

local function ends_with(path, suffix)
	return path:find(suffix, nil, true) or path:find(suffix, nil, true)
end

local function path_segments(path)
	return string.match(path, "(.-)([^\\/]-%.?([^%.\\/]*))$")
end

local function name_ext(file_name)
	return string.match(file_name, "(.+)%..+")
end

local function remove_utf8bom(text)
	utf8_bom = string.char(0xEF, 0xBB, 0xBF)
	if(string.sub(text,1, 3) == utf8_bom) then
		text = string.sub(text, 4, -1)
		return text
	else
		return text
	end
end
-- ---------------------------------------------------------------------------------
-- Lip-sync Lua table from lab
-- ---------------------------------------------------------------------------------
local function txt2table(opts)
	local base_path,file_name = path_segments(editor.get(opts.selection[1], "path"))
	local name = name_ext(file_name)
	local exp_data = "return {"
	for _, id in pairs(opts.selection) do
		-- local path,name = editor.get(id, "path")
		local line = editor.get(id, "text")
		line = remove_utf8bom(line)
		line = string.format('%q', line)
		-- local file = io.open("." .. path, "r")
		-- local line = remove_utf8bom(file)
		exp_data = exp_data .. line .. ","
		-- file:close()
	end
	exp_data = exp_data .. "}"
	local exp_file = io.open("." .. base_path .. "text.lua", "w")
	exp_file:write(exp_data)
	exp_file:close()
end
-- ---------------------------------------------------------------------------------
-- ---------------------------------------------------------------------------------
function M.get_commands()
	return {
		{
			label="Create text Table From txt...",
			locations = {"Assets"},
			active = function(opts)
				for _, id in pairs(opts.selection) do
					local path = editor.get(id, "path")
					if ends_with(path, ".txt") then
						return true
					else
						return false
					end
				end
			end,
			query = {
				selection = {type = "resource", cardinality = "many"}
			},
			run = txt2table
		},
	}
	
end

return M